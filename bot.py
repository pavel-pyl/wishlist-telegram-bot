import os
import logging
import random
import json
import base64
from datetime import datetime
from dotenv import load_dotenv

import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import (BotCommand, InlineKeyboardButton, InlineKeyboardMarkup,
                      Update)
from telegram.ext import (ApplicationBuilder, CallbackQueryHandler,
                          CommandHandler, ContextTypes)

# Logging setup
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("BOT_TOKEN")
SPREADSHEET_NAME = "WishListBot"
creds_b64 = os.getenv("GOOGLE_CREDENTIALS_B64")
creds_json = base64.b64decode(creds_b64).decode('utf-8')
credentials_dict = json.loads(creds_json)

# Setup Google Sheets client
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive",
]
credentials = ServiceAccountCredentials.from_json_keyfile_dict(
    credentials_dict, scope
)

gc = gspread.authorize(credentials)
sheet = gc.open(SPREADSHEET_NAME).sheet1  # First sheet


class TableHeaders:
    gift_name = 1
    price = 2
    link = 3
    status = 4


class CellHeaders:
    gift_name = 2
    price = 3
    link = 4
    status = 5
    log = 6


HELLO_MESSAGES = [
    "–ü—Ä–∏–≤—ñ—Ç {}! –û, –¥–∏–≤–∏—Å—å —Ö—Ç–æ –∑–≥–∞–¥–∞–≤, —â–æ —Ç—Ä–µ–±–∞ –ø–æ–¥–∞—Ä—É–Ω–æ–∫! –ù–µ —Ö–≤–∏–ª—é–π—Å—è, —è —Ç—É—Ç, —â–æ–± –≤—Ä—è—Ç—É–≤–∞—Ç–∏ —Ç–≤—ñ–π –¥–µ–Ω—å (—ñ —Ç–≤–æ—é —Ä–µ–ø—É—Ç–∞—Ü—ñ—é). –¢—É—Ç ‚Äî —Ç—ñ–ª—å–∫–∏ —Ç–µ, —â–æ —Ç–≤–æ—ó –±–ª–∏–∑—å–∫—ñ —Ä–µ–∞–ª—å–Ω–æ —á–µ–∫–∞–ª–∏, –∞ –Ω–µ —á–µ—Ä–≥–æ–≤–∞ –±–µ–∑–≥–ª—É–∑–¥–∞ –¥—Ä—ñ–±–Ω–∏—á–∫–∞, —è–∫—É —Ç–∏ –∑–Ω–æ–≤—É –∑–∞–±—É–¥–µ—à –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏. –í—ñ–ª—å–Ω—ñ –ø–æ–¥–∞—Ä—É–Ω–∫–∏? –ë–µ—Ä–∏ —à–≤–∏–¥–∫–æ, –±–æ –ø–æ–∫–∏ —Ç–∏ –¥—É–º–∞—î—à, —Ö—Ç–æ—Å—å —É–∂–µ –≤—Å–µ –≤—ñ–¥—Ö–∞–ø–∞–≤! –¢–≤–æ—ó –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω—ñ –ø–æ–¥–∞—Ä—É–Ω–∫–∏ ‚Äî —Ü–µ —Ç–≤—ñ–π –º–∞–ª–µ–Ω—å–∫–∏–π —Å–µ–∫—Ä–µ—Ç, —è–∫ —Å–ø—Ä–æ–±–∞ —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –¥—ñ—î—Ç—É –∑ –ø–æ–Ω–µ–¥—ñ–ª–∫–∞: –∫—Ä–∞—â–µ –ø—Ä–æ —Ü–µ –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç–∏. –û–±–∏—Ä–∞–π –æ–ø—Ü—ñ—é —ñ –¥–∞–≤–∞–π –≤–∂–µ —â–æ—Å—å —Ä–æ–±–∏—Ç–∏, –ø–æ–∫–∏ —Å–≤—è—Ç–∫–æ–≤–∏–π –¥–µ–¥–ª–∞–π–Ω –Ω–µ –Ω–∞–∫—Ä–∏–≤ —Ç–µ–±–µ —è–∫ —Å–Ω—ñ–≥–æ–≤–∞ –ª–∞–≤–∏–Ω–∞.",
    "–ü—Ä–∏–≤—ñ—Ç, {}! –û, —Ç–∏ —Ç—É—Ç. –ù–∞—Ä–µ—à—Ç—ñ. –ó–≤—ñ—Å–Ω–æ –∂, –Ω–µ —Ç–æ–º—É —â–æ –∑–≥–∞–¥–∞–≤ –ø—Ä–æ –ø–æ–¥–∞—Ä—É–Ω–∫–∏ –≤—á–∞—Å–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –∑—ñ—Ä–∫–∏ —Å—Ç–∞–ª–∏ —è–∫ —Ç—Ä–µ–±–∞. –î–æ–±—Ä–µ, —â–æ —è —Ç—É—Ç, –±–æ –±–µ–∑ –º–µ–Ω–µ –≤—Å–µ –∑–∞–∫—ñ–Ω—á–∏–ª–æ—Å—è –± —á–µ—Ä–≥–æ–≤–∏–º –Ω–æ—Å–∫–æ–º –∞–±–æ –±–ª–æ–∫–Ω–æ—Ç–æ–º '–Ω–∞ –≤–∏—Ä—ñ—Å—Ç'. –û–±–∏—Ä–∞–π —â–æ—Å—å –≥—ñ–¥–Ω–µ. –ê –∫—Ä–∞—â–µ —à–≤–∏–¥–∫–æ ‚Äî –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—è —Ç—É—Ç —Å–µ—Ä–π–æ–∑–Ω–∞, —ñ —Ç–≤—ñ–π –∫—É–∑–µ–Ω —É–∂–µ —Ç–æ—á–Ω–æ —â–æ—Å—å –∑–∞–±—Ä–æ–Ω—é–≤–∞–≤.",
    "{}! –í—ñ—Ç–∞—é –≤ —Ü—å–æ–º—É —Å–≤—è—Ç–∫–æ–≤–æ–º—É —Ö–∞–æ—Å—ñ. –ó–Ω–æ–≤—É —á–µ–∫–∞–≤(-–ª–∞) –¥–æ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –º–æ–º–µ–Ω—Ç—É, –ø—Ä–∞–≤–¥–∞ –∂? –ù—É –Ω—ñ—á–æ–≥–æ. –Ø —Ç–≤–æ—è –æ—Å—Ç–∞–Ω–Ω—è –Ω–∞–¥—ñ—è –≤–∏–≥–ª—è–¥–∞—Ç–∏ –ª—é–¥–∏–Ω–æ—é, —è–∫–∞ —Ö–æ—á–∞ –± –≤–¥–∞—î, —â–æ –ø—ñ–∫–ª—É—î—Ç—å—Å—è. –¢—É—Ç ‚Äî —Å–ø–∏—Å–æ–∫ –±–∞–∂–∞–Ω—å, –æ–±–º–µ–∂–µ–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–µ—Ä–≤—ñ–≤ —ñ —â–µ –º–µ–Ω—à–µ —á–∞—Å—É. –¢–æ–∂ –Ω–µ —Ç—É–ø–∏: –æ–±–∏—Ä–∞–π —ñ –±—Ä–æ–Ω—é–π, –ø–æ–∫–∏ –≤—Å—ñ –ø–æ–¥–∞—Ä—É–Ω–∫–∏ –Ω–µ —Ä–æ–∑—ñ–±—Ä–∞–ª–∏ —ñ–Ω—à—ñ '–≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ'.",
    "–û, {}! –•—Ç–æ—Å—å –Ω–∞—Ä–µ—à—Ç—ñ –≤–∏—Ä—ñ—à–∏–≤ –ø–æ–¥–±–∞—Ç–∏ –ø—Ä–æ –±–ª–∏–∑—å–∫–∏—Ö! –ê–±–æ —Ö–æ—á–∞ –± —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∞–∫—É —ñ–ª—é–∑—ñ—é. –¶–µ–π —Å–ø–∏—Å–æ–∫ ‚Äî —Ç–≤—ñ–π —à–∞–Ω—Å –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ —â–æ—Å—å, —â–æ —Å–ø—Ä–∞–≤–¥—ñ —Ö–æ—á—É—Ç—å. –ù–µ —â–æ-–Ω–µ–±—É–¥—å –∑ –Ω–∞–π–±–ª–∏–∂—á–æ–≥–æ —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç—É, –∞ —Å–ø—Ä–∞–≤–∂–Ω—î '–æ–≥–æ, –∑–≤—ñ–¥–∫–∏ —Ç–∏ –∑–Ω–∞–≤(-–ª–∞)?!'. –¢–æ–∂ –æ–±–∏—Ä–∞–π —É–≤–∞–∂–Ω–æ. –ê–±–æ –Ω–∞–æ—Å–ª—ñ–ø ‚Äî –≥–æ–ª–æ–≤–Ω–µ —Ö–æ—á —â–æ—Å—å –∑–∞–±—Ä–æ–Ω—é–π –¥–æ —Ç–æ–≥–æ, —è–∫ —Ü–µ –∑—Ä–æ–±–∏—Ç—å —Ç–≤–æ—è –¥–≤–æ—é—Ä—ñ–¥–Ω–∞ —Ç—ñ—Ç–∫–∞ –∑ Wi-Fi 2G.",
    "–ô–æ, {}! –ù–∞—Ä–µ—à—Ç—ñ —Ç–∏ —Ç—É—Ç. –Ü —è –≤–ø–µ–≤–Ω–µ–Ω–∏–π(-–Ω–∞), —Ç–∏ –≤ –∑–∞—Ö–≤–∞—Ç—ñ –≤—ñ–¥ —ñ–¥–µ—ó –∑–Ω–æ–≤—É –≤–∏–≥–∞–¥—É–≤–∞—Ç–∏, —â–æ –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏. –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π ‚Äî —è –∑—Ä–æ–±–∏–≤ –∑–∞ —Ç–µ–±–µ –Ω–∞–π–≤–∞–∂—á–µ: –∑—ñ–±—Ä–∞–≤ –±–∞–∂–∞–Ω–Ω—è —Ç–∏—Ö, –∫–æ–≥–æ —Ç–∏ –≤—ñ—Ç–∞—î—à. –¢–æ–±—ñ –ª–∏—à–∏–ª–æ—Å—å –ª–∏—à–µ –Ω–µ –ø—Ä–æ–≤—Ç–∏–∫–∞—Ç–∏ –º–æ–º–µ–Ω—Ç. –ë–æ —ñ–Ω–∞–∫—à–µ –±—É–¥–µ —è–∫ –∑–∞–≤–∂–¥–∏: —Ç–∏ –∑–Ω–æ–≤—É –¥–∞—Ä—É—î—à '—É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω—É' —á–∞—à–∫—É, —ñ —Ç–µ–±–µ –∑–Ω–æ–≤—É –ø—Ä–æ–∫–ª–∏–Ω–∞—é—Ç—å –∑–∞ –∫—É–ª—ñ—Å–∞–º–∏.",
    "–ü—Ä–∏–≤—ñ—Ç, {}! –Ø –Ω–µ –∫–∞–∂—É, —â–æ —Ç–∏ –∑–∞–ª–∏—à–∏–≤(-–ª–∞) –≤—Å–µ –Ω–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –º–æ–º–µ–Ω—Ç, –∞–ª–µ... –≤ –ø—Ä–∏–Ω—Ü–∏–ø—ñ —Ç–∞–∫ —ñ —î. –ù–∞ —â–∞—Å—Ç—è, —Ü–µ–π –±–æ—Ç ‚Äî —Ç–≤—ñ–π —Ä—è—Ç—ñ–≤–Ω–∏–∫. –£—Å–µ –ø—Ä–æ—Å—Ç–æ: –≤—ñ–¥–∫—Ä–∏–≤–∞—î—à —Å–ø–∏—Å–æ–∫, –≤–∏–±–∏—Ä–∞—î—à –ø–æ–¥–∞—Ä—É–Ω–æ–∫, –±—Ä–æ–Ω—é—î—à. –ú—ñ–Ω—ñ–º—É–º –∑—É—Å–∏–ª—å ‚Äî –º–∞–∫—Å–∏–º—É–º –≤—Ä–∞–∂–µ–Ω–Ω—è. –ù–∞–≤—ñ—Ç—å –≤–∏–≥–ª—è–¥–∞—î—à —Ç—É—Ä–±–æ—Ç–ª–∏–≤–æ—é –ª—é–¥–∏–Ω–æ—é! –ú–∞–π–∂–µ —è–∫ —Ç–æ–π, —Ö—Ç–æ –≤—Å–µ —Å–ø–ª–∞–Ω—É–≤–∞–≤ –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å (–∞–ª–µ –º–∏-—Ç–æ –∑–Ω–∞—î–º–æ).",
    "–ó–¥–æ—Ä–æ–≤, {}! –ù–µ –±—É–¥—É –±—Ä–µ—Ö–∞—Ç–∏ ‚Äî —à–∞–Ω—Å—ñ–≤ –≤—Ä–∞–∑–∏—Ç–∏ –∑–∞–ª–∏—à–∏–ª–æ—Å—å –Ω–µ–±–∞–≥–∞—Ç–æ. –ê–ª–µ, –∑ —ñ–Ω—à–æ–≥–æ –±–æ–∫—É, —Ç–∏ –≤–∂–µ —Ç—É—Ç, –∞ —Ü–µ –≤–∂–µ –∫—Ä–æ–∫ —É–ø–µ—Ä–µ–¥. –ü–µ—Ä–µ–¥ —Ç–æ–±–æ—é —Å–ø–∏—Å–æ–∫ —Ä–µ—á–µ–π, —è–∫—ñ –ª—é–¥–∏ —Ä–µ–∞–ª—å–Ω–æ —Ö–æ—á—É—Ç—å, –∞ –Ω–µ '–≤–∏–±—ñ—Ä —ñ–∑ –ø–∞–Ω—ñ–∫–∏ –≤ –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–µ–Ω—å'. –¢–æ –±–µ—Ä–∏ —â–æ—Å—å, –±—Ä–æ–Ω—é–π, —ñ –±—É–¥–µ–º–æ –ø—Ä–∏–∫–∏–¥–∞—Ç–∏—Å—è, —â–æ —Ç–∞–∫ —ñ –±—É–ª–æ –∑–∞–¥—É–º–∞–Ω–æ. –ù—É —Å–µ—Ä–π–æ–∑–Ω–æ ‚Äî –Ω–∞–≤—ñ—Ç—å —Ç–≤—ñ–π –ø–µ—Å –±—ñ–ª—å—à –æ—Ä–≥–∞–Ω—ñ–∑–æ–≤–∞–Ω–∏–π.",
    "–ü—Ä–∏–≤—ñ—Ç, {}! –¢–∞–∫, —è –∑–Ω–∞—é, —Ç–µ–±–µ –∑–º—É—Å–∏–ª–æ –∂–∏—Ç—Ç—è, –∞ –Ω–µ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è. –ê–ª–µ –º–∏ —Ç—É—Ç –Ω–µ –¥–ª—è —Å—É–¥—É ‚Äî –º–∏ –¥–ª—è –¥—ñ–ª–∞. –°–ø–∏—Å–æ–∫ –±–∞–∂–∞–Ω—å —É–∂–µ –Ω–∞ –º—ñ—Å—Ü—ñ, —Ç–≤–æ—ó –±–ª–∏–∑—å–∫—ñ —â–µ –Ω–µ –≤—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞–¥—ñ—é, —ñ —è–∫—â–æ –≤—Å–µ –∑—Ä–æ–±–∏—à –ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚Äî –º–æ–∂–µ—à –Ω–∞–≤—ñ—Ç—å –∑—ñ–±—Ä–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ –±–∞–ª—ñ–≤ –¥–æ –∫–∞—Ä–º–∏. –•–æ—á–∞ –± —Å–ø—Ä–æ–±—É–π –Ω–µ –≤—Ç—Ä–∞—Ç–∏—Ç–∏ –≤—Å—ñ –æ–¥—Ä–∞–∑—É. –ü–æ–¥–∞—Ä—É–Ω–∫–∏ –Ω–µ –≤–∏–±–∏—Ä–∞—é—Ç—å —Å–µ–±–µ —Å–∞–º—ñ ‚Äî —Ç–∏—Å–Ω–∏ —ñ –¥—ñ–π!",
    "–û, {}. –°–≤—è—Ç–∫–æ–≤–∏–π —Å–µ–∑–æ–Ω ‚Äî —á–∞—Å —Ä–∞–¥–æ—Å—Ç—ñ, –ª—é–±–æ–≤—ñ‚Ä¶ —ñ –ø–∞–Ω—ñ–∫–∏ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Ö–≤–∏–ª–∏–Ω–∏. –Ø–∫—â–æ —Ç–∏ —Ç—É—Ç, –∑–Ω–∞—á–∏—Ç—å —Ç–∏ –∞–±–æ –≥–µ–Ω—ñ–π –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è, –∞–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞ –º–µ–∂—ñ –∑—Ä–∏–≤—É. –£ –±—É–¥—å-—è–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É ‚Äî –º–æ–ª–æ–¥–µ—Ü—å, —â–æ –¥—ñ–π—à–æ–≤(-–ª–∞) —Å—é–¥–∏. –û–±–∏—Ä–∞–π –ø–æ–¥–∞—Ä—É–Ω–æ–∫, —è–∫–∏–π —Ö–æ—á —Ö—Ç–æ—Å—å –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ. –¶–µ –Ω–µ —Ç–≤—ñ–π —à–∞–Ω—Å ‚Äì —Ü–µ –æ—Å—Ç–∞–Ω–Ω—ñ–π —à–∞–Ω—Å. –Ü —â–µ —Ç—Ä–æ—Ö–∏ —Å–∞—Ä–∫–∞–∑–º—É –≤ –ø–æ–¥–∞—Ä—É–Ω–æ–∫ üéÅ.",
    "–ô–æ–π, {}! –¢—É—Ç —Å–ø–∏—Å–æ–∫ –º—Ä—ñ–π, —è–∫—ñ –ø–æ–∫–∏ —â–µ –º–æ–∂–Ω–∞ –≤—Ç—ñ–ª–∏—Ç–∏. –Ø–∫—â–æ –≤ —Ç–µ–±–µ –≤–∏–Ω–∏–∫–ª–∞ –¥—É–º–∫–∞: ¬´–û–π, –º–æ–∂–µ –≤–∂–µ –ø—ñ–∑–Ω–æ?¬ª ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–¥—å: —Ç–∞–∫, –º–∞–π–∂–µ. –ê–ª–µ —â–µ —î —á–∞—Å –≤—Ä—è—Ç—É–≤–∞—Ç–∏ —Å–∏—Ç—É–∞—Ü—ñ—é. –ù–µ –≥–∞–ª—å–º—É–π ‚Äî —Ç–≤–æ—è —Ä–µ–ø—É—Ç–∞—Ü—ñ—è —Ç—É—Ä–±–æ—Ç–ª–∏–≤–æ—ó –ª—é–¥–∏–Ω–∏ –≤–∏—Å–∏—Ç—å –Ω–∞ –≤–æ–ª–æ—Å–∏–Ω—Ü—ñ. –Ü —Ü–µ–π –±–æ—Ç ‚Äî —Ç–≤—ñ–π –æ—Å—Ç–∞–Ω–Ω—ñ–π —à–∞–Ω—Å –Ω–µ –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ –ø–æ–≤—ñ—Ç—Ä—è –∞–±–æ —à–æ–∫–æ–ª–∞–¥–∫—É –∑ –ê–ó–°.",
    "{}! –¢–∏ –∂ –Ω–µ –¥—É–º–∞–≤(-–ª–∞), —â–æ –±–µ–∑ –º–µ–Ω–µ –æ–±—ñ–π–¥–µ—à—Å—è? –û—Å—å –≤—ñ–Ω ‚Äî —Å–ø–∏—Å–æ–∫, —è–∫–∏–π –º–æ–∂–µ –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ–±–µ –∑ '–æ–π, —è —â–æ—Å—å –∫—É–ø–ª—é –ø—ñ–∑–Ω—ñ—à–µ' –Ω–∞ '–≤–∞—É, —è–∫ —Ç–∏ –∑–¥–æ–≥–∞–¥–∞–≤—Å—è(-–ª–∞—Å—å)?!'. –ù–µ –∑–≤–æ–ª—ñ–∫–∞–π: –∫–æ–∂–Ω–∞ —Å–µ–∫—É–Ω–¥–∞ ‚Äî —â–µ –æ–¥–Ω–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å, —â–æ —Ç–≤–æ—è –±–∞–±—Ü—è –∑–∞–±—Ä–æ–Ω—é—î –æ—Å—Ç–∞–Ω–Ω—ñ–π –Ω–æ—Ä–º–∞–ª—å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç. –î—ñ–π, –±–æ —á–∞—Å ‚Äî —Ü–µ –ø–æ–¥–∞—Ä—É–Ω–æ–∫, —è–∫–æ–≥–æ —Ç–∏ –≤–∂–µ –º–∞–π–∂–µ –Ω–µ –º–∞—î—à üòâ",
]

BOOK_BUTTON_VARIANTS = [
    "‚úÖ –ú–æ—î!",
    "‚úÖ –ó–∞–±–∏—Ä–∞—é!",
    "‚úÖ –•–æ—á—É. –Ü –≤—Å–µ.",
    "‚úÖ –ë—Ä–æ–Ω—é—é üî•",
    "‚úÖ –ú–æ—î. –ù–µ —á—ñ–ø–∞–π.",
    "‚úÖ –¢–∞ –±–µ—Ä—É –≤–∂–µ...",
    "‚úÖ –¶–µ –º–æ—î!",
    "‚úÖ –ù—É –æ–∫, —Ö–∞–π –±—É–¥–µ",
    "‚úÖ –õ–∏—à—ñ—Ç—å –º–µ–Ω—ñ üò§",
    "‚úÖ –ú–æ—è –ø—Ä—î–ª—î—Å—Ç—å!",
]
BOOK_BUTTON_LONG_VARIANTS = [
    "‚úÖ –ë–µ—Ä—É! –ë–æ —Ö—Ç–æ—Å—å –º—É—Å–∏—Ç—å —Ü–µ –∑—Ä–æ–±–∏—Ç–∏",
    "‚úÖ –ó–∞–±–∏—Ä–∞—é. –Ü –Ω–µ –ø–∏—Ç–∞–π—Ç–µ —á–æ–º—É",
    "‚úÖ –ú–æ—î! –®–∞–Ω—Å—ñ–≤ –≤–∞–º –±—ñ–ª—å—à–µ –Ω–µ–º–∞",
    "‚úÖ –ë—Ä–æ–Ω—é—é, –ø–æ–∫–∏ –Ω–µ –∑–ª–∞–º–∞–≤—Å—è –±–æ—Ç",
    "‚úÖ –í–∏—Ä—ñ—à–µ–Ω–æ ‚Äî —Ç–µ–ø–µ—Ä —Ü–µ –º–æ—î",
    "‚úÖ –•–∞–ø–∞—é, –±–æ —è–∫ –Ω–µ —è, —Ç–æ —Ö—Ç–æ?",
    "‚úÖ –Ø –Ω–∞—Ä–æ–¥–∏–≤—Å—è, —â–æ–± —Ü–µ –≤–∑—è—Ç–∏",
    "‚úÖ –ú–µ–Ω—ñ —Ç—Ä–µ–±–∞. –î—É–∂–µ. –ù–µ —Å–º—ñ–π—Ç–µ—Å—å",
    "‚úÖ –ú–æ—ó –æ—á—ñ —Ü–µ –≤–∏–±—Ä–∞–ª–∏ ‚Äî –≤—Å–µ",
    "‚úÖ –¢–∞ –¥–∞–π—Ç–µ –≤–∂–µ —Å—é–¥–∏ —Ç–æ–π –¥–∞—Ä—É–Ω–æ–∫",
]
CANCEL_BUTTON_VARIANTS = [
    "‚ùå –ü–µ—Ä–µ–¥—É–º–∞–≤",
    "‚ùå –¢–∞ –Ω—É –π–æ–≥–æ",
    "‚ùå –ù–µ —Ö–æ—á—É –≤–∂–µ",
    "‚ùå –ó–∞–±–∏—Ä–∞–π—Ç–µ –Ω–∞–∑–∞–¥",
    "‚ùå –¶–µ –Ω–µ –º–æ—î",
    "‚ùå –Ø –ø–µ—Ä–µ–¥—É–º–∞–≤ üòê",
    "‚ùå –ë—É–ª–æ —ñ–º–ø—É–ª—å—Å–∏–≤–Ω–æ",
    "‚ùå –ù–µ—Ö–∞–π –±—É–¥–µ —á—É–∂–∏–º",
    "‚ùå –Ø –ø–µ—Ä–µ–¥—É–º–∞–≤ ü´£",
    "‚ùå –û–±—ñ–π–¥—É—Å—å —è–∫–æ—Å—å",
]
CANCEL_BUTTON_LONG_VARIANTS = [
    "‚ùå –ü–µ—Ä–µ–¥—É–º–∞–≤, —Ü–µ –≤—Å–µ –¥—É—Ä–Ω—è –Ω–∞—Å–ø—Ä–∞–≤–¥—ñ",
    "‚ùå –¢–∞ –Ω—É –π–æ–≥–æ, –∑–Ω–∞–π–¥–µ—Ç—å—Å—è —Ö—Ç–æ—Å—å —ñ–Ω—à–∏–π",
    "‚ùå –ù–µ —Ö–æ—á—É –≤–∂–µ, –Ω–∞—â–æ –º–µ–Ω—ñ —Ü–µ–π —Å—Ç—Ä–µ—Å",
    "‚ùå –ó–∞–±–∏—Ä–∞–π—Ç–µ –Ω–∞–∑–∞–¥, —è –ø–µ—Ä–µ–¥—É–º–∞–≤(–ª–∞)",
    "‚ùå –¶–µ —Ç–æ—á–Ω–æ –Ω–µ –º–æ—î, –¥—è–∫—É—é –∑–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é",
    "‚ùå –Ø –ø–µ—Ä–µ–¥—É–º–∞–≤(–ª–∞), –∂–∏—Ç—Ç—è –∫–æ—Ä–æ—Ç–∫–µ",
    "‚ùå –ë—É–ª–æ —ñ–º–ø—É–ª—å—Å–∏–≤–Ω–æ, –ø—Ä–æ–±–∞—á—Ç–µ –º–µ–Ω–µ",
    "‚ùå –ù–µ—Ö–∞–π —Ö—Ç–æ—Å—å —ñ–Ω—à–∏–π —Ç–µ–ø–µ—Ä –º—É—á–∏—Ç—å—Å—è",
    "‚ùå –Ø –ø–µ—Ä–µ–¥—É–º–∞–≤(–ª–∞), –Ω–µ—Ä–≤–∏ –¥–æ—Ä–æ–∂—á—ñ",
    "‚ùå –û–±—ñ–π–¥—É—Å—å —è–∫–æ—Å—å –±–µ–∑ —Ü—å–æ–≥–æ –¥–∏–≤–∞",
]

VIEW_BUTTON_VARIANTS = [
    "üëÄ –ü–æ–≥–ª—è–Ω—É",
    "üëÄ –©–æ —Ü–µ?",
    "üëÄ –ü–æ–¥–∏–≤–ª—é—Å—å",
    "üëÄ –ü–µ—Ä–µ–≤—ñ—Ä—é",
    "üëÄ –ì–ª—è–Ω—É",
    "üëÄ –ó–∞–∑–∏—Ä–Ω—É",
    "üëÄ –†–æ–∑–¥–∏–≤–ª—é—Å—å",
    "üëÄ –ü–æ–≥–ª—è–Ω—É—Ç–∏",
    "üëÄ –®–æ —Ç–∞–º?",
    "üëÄ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞",
]


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user  # Get user info
    user_name = user.full_name if user else "–≤—Å—ñ–º"

    keyboard = [
        [
            InlineKeyboardButton("üéÅ –©–æ —â–µ –ª–∏—à–∏–ª–æ—Å—å?", callback_data="free"),
            InlineKeyboardButton("üîë –ü–æ–≥–ª—è–Ω—å, —â–æ —Ç–≤–æ—î", callback_data="my_booked"),
        ]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    hello_message = random.choice(HELLO_MESSAGES)

    await update.message.reply_text(
        hello_message.format(user_name), reply_markup=reply_markup
    )


async def show_free_gifts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = sheet.get_all_records()
    keyboards = []
    names = []
    # Start at 2 to account for header row
    for idx, row in enumerate(data, start=2):
        if not row["status"]:
            names.append(row["gift_name"])
            confirm_button_text = random.choice(BOOK_BUTTON_VARIANTS)
            view_button_text = random.choice(VIEW_BUTTON_VARIANTS)
            keyboards.append(
                [
                    InlineKeyboardButton(view_button_text, url=row["link"]),
                    InlineKeyboardButton(
                        confirm_button_text, callback_data=f"book|{idx}"
                    ),
                ]
            )
    text = (
        "üéâ –¢—É—Ç –ª–µ–∂–∞—Ç—å –ø–æ–¥–∞—Ä—É–Ω–∫–∏, —è–∫—ñ —â–µ –Ω–µ –≤—Å—Ç–∏–≥–ª–∏ –≤—Ç–µ–∫—Ç–∏!"
        if keyboards
        else "üôÖ‚Äç –ù–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –ø–æ–¥–∞—Ä—É–Ω–∫—ñ–≤, —Ç—Ä–∏–º–∞–π –∫—É–ª–∞—á–∫–∏!."
    )
    await context.bot.send_message(chat_id=update.effective_chat.id, text=text)

    for name, keyboard in zip(names, keyboards):
        reply_markup = InlineKeyboardMarkup([keyboard])
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"üéÅ {name}",
            reply_markup=reply_markup,
        )


async def confirm_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    action, row_num = query.data.split("|")
    row_num = int(row_num)

    row = sheet.row_values(row_num)
    gift_name = row[TableHeaders.gift_name]

    # Store details in user_data so we can restore later if canceled
    context.user_data["last_gift"] = {
        "row_num": row_num,
        "gift_name": gift_name,
        "price": row[TableHeaders.price],
        "link": row[TableHeaders.link],
    }
    confirm_button_text = random.choice(BOOK_BUTTON_LONG_VARIANTS)
    cancel_button_text = random.choice(CANCEL_BUTTON_LONG_VARIANTS)

    keyboard = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(
                    confirm_button_text, callback_data=f"confirm|{row_num}"
                )
            ],
            [InlineKeyboardButton(cancel_button_text, callback_data="cancel")],
        ]
    )

    await query.edit_message_text(
        f"–•–æ—á–µ—à –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ *{gift_name}*? –ë–æ –ø–æ–∫–∏ —Ç–∏ –¥—É–º–∞—î—à, —Ö—Ç–æ—Å—å –≤–∂–µ –ø–∏–ª—å–Ω–æ —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—î!",
        parse_mode="Markdown",
        reply_markup=keyboard,
    )


async def finalize_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    action, row_num = query.data.split("|")
    row_num = int(row_num)
    user_name = query.from_user.full_name

    current_status = sheet.cell(row_num, CellHeaders.status).value
    if current_status and current_status != user_name:
        await query.edit_message_text(
            "‚ùå –û–π, –≤–∏–±–∞—á, —Ü–µ–π –ø–æ–¥–∞—Ä—É–Ω–æ–∫ —É–∂–µ —Ö—Ç–æ—Å—å —Å–ø—Ä–∏—Ç–Ω–∏–π —Å–æ–±—ñ –ø—Ä–∏–ø—Ä–∏–≤–∞—Ç–∏–≤. –®–≤–∏–¥—à–µ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —à—É–∫–∞–π!"
        )

    else:
        sheet.update_cell(
            row_num, CellHeaders.status, user_name
        )  # Column 5: status (booked by)
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        user_name = query.from_user.full_name
        log_entry = f"üìå Booked by {user_name} at {timestamp}"

        # Update status
        sheet.update_cell(row_num, CellHeaders.status, user_name)

        # Append to log
        existing_log = sheet.cell(row_num, CellHeaders.log).value or ""
        updated_log = f"{existing_log}\n{log_entry}".strip()

        sheet.update_cell(row_num, CellHeaders.log, updated_log)
        cancel_button_text = random.choice(CANCEL_BUTTON_VARIANTS)

        gift_name = sheet.cell(row_num, CellHeaders.gift_name).value
        view_button_text = random.choice(VIEW_BUTTON_VARIANTS)

        keyboard = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        view_button_text,
                        url=sheet.cell(row_num, CellHeaders.link).value,
                    ),
                    InlineKeyboardButton(
                        cancel_button_text, callback_data=f"unbook|{row_num}"
                    ),
                ]
            ]
        )

        await query.edit_message_text(
            f'‚úÖ –í—Å–µ –∑—Ä–æ–±–ª–µ–Ω–æ ‚Äî "{gift_name}" —Ç–µ–ø–µ—Ä –ø—ñ–¥ —Ç–≤–æ—ó–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º. –ú–æ–ª–æ–¥–µ—Ü—å!',
            parse_mode="Markdown",
            reply_markup=keyboard,
        )


async def cancel_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    last = context.user_data.get("last_gift")
    if not last:
        await query.edit_message_text("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ.")
        return

    gift_name = last["gift_name"]
    # price = last["price"]
    link = last["link"]
    row_num = last["row_num"]

    confirm_button_text = random.choice(BOOK_BUTTON_VARIANTS)
    view_button_text = random.choice(VIEW_BUTTON_VARIANTS)

    reply_markup = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(view_button_text, url=link),
                InlineKeyboardButton(
                    confirm_button_text, callback_data=f"book|{row_num}"
                ),
            ]
        ]
    )

    await query.edit_message_text(text=gift_name, reply_markup=reply_markup)


async def cancel_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        _, row_num = query.data.split("|")
        row_num = int(row_num)
    except ValueError:
        await query.edit_message_text("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥—ñ—è.")
        return

    user_name = query.from_user.full_name
    current_status = sheet.cell(row_num, CellHeaders.status).value
    gift_name = sheet.cell(row_num, CellHeaders.gift_name).value

    if current_status != user_name:
        await query.edit_message_text(
            "‚ùå –û–π-–æ–π, —Ü–µ–π –ø–æ–¥–∞—Ä—É–Ω–æ–∫ —Ç–∏ –Ω–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞–≤. –ú–∞–±—É—Ç—å, –ø–ª—É—Ç–∞—î—à—Å—è —É –ø–æ–¥–∞—Ä—É–Ω–∫–∞—Ö?"
        )
        return

    # Remove booking
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    user_name = query.from_user.full_name
    log_entry = f"‚ùå Unbooked by {user_name} at {timestamp}"

    # Unset booking
    sheet.update_cell(row_num, CellHeaders.status, "")

    # Append to log
    existing_log = sheet.cell(row_num, CellHeaders.log).value or ""
    updated_log = f"{existing_log}\n{log_entry}".strip()

    sheet.update_cell(row_num, CellHeaders.log, updated_log)

    # Restore original "–•–æ—á—É" button
    link = sheet.cell(row_num, CellHeaders.link).value

    button_text = random.choice(BOOK_BUTTON_VARIANTS)
    view_button_text = random.choice(VIEW_BUTTON_VARIANTS)

    reply_markup = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(view_button_text, url=link),
                InlineKeyboardButton(button_text, callback_data=f"book|{row_num}"),
            ]
        ]
    )

    await query.edit_message_text(text=gift_name, reply_markup=reply_markup)


async def show_booked_gifts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        user_name = update.message.from_user.full_name
    else:
        query = update.callback_query
        await query.answer()

        user_name = query.from_user.full_name

    data = sheet.get_all_records()
    booked = []
    names = []

    for idx, row in enumerate(data, start=2):
        if row["status"] == user_name:
            names.append(
                row["gift_name"],
            )
            cancel_button_text = random.choice(CANCEL_BUTTON_VARIANTS)
            view_button_text = random.choice(VIEW_BUTTON_VARIANTS)
            booked.append(
                [
                    InlineKeyboardButton(view_button_text, url=row["link"]),
                    InlineKeyboardButton(
                        cancel_button_text, callback_data=f"remove|{idx}"
                    ),
                ]
            )

    text = (
        "–¢–∏ —Å–ø—Ä–∞–≤–¥—ñ —â–æ—Å—å –≤–∑—è–≤? –í—ñ—Ç–∞—é –∑ –¥–∏–≤–æ–º!"
        if booked
        else "üïµÔ∏è‚Äç‚ôÇÔ∏è –¢–≤—ñ–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä—É–Ω–∫—ñ–≤ –ø—É—Å—Ç–∏–π, —è–∫ —Ç–≤–æ—ó –æ–ø—Ä–∞–≤–¥–∞–Ω–Ω—è."
    )
    await context.bot.send_message(chat_id=update.effective_chat.id, text=text)

    for name, book in zip(names, booked):
        reply_markup = InlineKeyboardMarkup([book])
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"üéÅ {name}",
            reply_markup=reply_markup,
        )


async def remove_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    action, row_num = query.data.split("|")
    row_num = int(row_num)

    gift_name = sheet.cell(row_num, CellHeaders.gift_name).value

    keyboard = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(
                    "–¢–∞–∫, —Å–∫–∞—Å–æ–≤—É—é ‚ùå",
                    callback_data=f"remove_confirm|{row_num}",
                ),
                InlineKeyboardButton(
                    "–ù—ñ, –∑–∞–ª–∏—à–∞—é üëç", callback_data=f"remove_abort|{row_num}"
                ),
            ]
        ]
    )

    await query.edit_message_text(
        f"‚ö†Ô∏è –¢–∏ –≤–ø–µ–≤–Ω–µ–Ω–∏–π, —â–æ —Ö–æ—á–µ—à —Å–∫–∞—Å—É–≤–∞—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è *{gift_name}*?",
        parse_mode="Markdown",
        reply_markup=keyboard,
    )


async def remove_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    _, row_num = query.data.split("|")
    row_num = int(row_num)

    user_name = query.from_user.full_name
    current_status = sheet.cell(row_num, CellHeaders.status).value
    gift_name = sheet.cell(row_num, CellHeaders.gift_name).value

    if current_status != user_name:
        await query.edit_message_text(
            f"‚ùå –¶–µ–π –ø–æ–¥–∞—Ä—É–Ω–æ–∫ *{gift_name}* –Ω–µ —Ç–≤—ñ–π. –ê–ª–µ –ø—Ä–∏—î–º–Ω–æ, —â–æ —Ç–∏ —Å–ø—Ä–æ–±—É–≤–∞–≤!",
            parse_mode="Markdown",
        )
        return

    # –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–Ω—è—Ç—Ç—è –±—Ä–æ–Ω—ñ
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_entry = f"‚ùå Unbooked by {user_name} at {timestamp}"

    # –ó–Ω—ñ–º–∞—î–º–æ –±—Ä–æ–Ω—å
    sheet.update_cell(row_num, CellHeaders.status, "")

    # –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–≥
    existing_log = sheet.cell(row_num, CellHeaders.log).value or ""
    updated_log = f"{existing_log}\n{log_entry}".strip()
    sheet.update_cell(row_num, CellHeaders.log, updated_log)

    await query.edit_message_text(
        f"‚úÖ –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∑–Ω—è—Ç–æ: *{gift_name}*. –ù—É —â–æ –∂, —â–µ –ø–µ—Ä–µ–¥—É–º–∞—î—à ‚Äî –Ω–µ –¥–∏–≤—É–π—Å—è, —è–∫—â–æ –π–æ–≥–æ –≤–∂–µ –Ω–µ –±—É–¥–µ üòâ",
        parse_mode="Markdown",
    )


async def remove_abort(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    _, row_num = query.data.split("|")
    row_num = int(row_num)

    gift_name = sheet.cell(row_num, CellHeaders.gift_name).value

    await query.edit_message_text(
        f"üëå –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è *{gift_name}* –∑–∞–ª–∏—à–∏–ª–æ—Å—å –±–µ–∑ –∑–º—ñ–Ω. –î–æ–±—Ä–µ –ø–æ–¥—É–º–∞–≤!",
        parse_mode="Markdown",
    )


async def set_menu_commands(app):
    await app.bot.set_my_commands(
        [
            BotCommand("start", "üì¶ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º—ñ—Å—ñ—ó '–ü–æ–¥–∞—Ä—É–Ω–æ–∫'"),
            BotCommand("free", "üéÅ –ü–æ–¥–∞—Ä—É–Ω–∫–∏, —è–∫—ñ —â–µ –Ω–µ –≤–∫—Ä–∞–ª–∏"),
            BotCommand("my_booked", "üîí M–æ—ó —Ç—Ä–æ—Ñ–µ—ó"),
        ]
    )


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    cmd = query.data
    if cmd == "free":
        await show_free_gifts(update, context=context)
    elif cmd == "my_booked":
        await show_booked_gifts(update, context=context)

WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = "https://wishlist-telegram-bot.onrender.com" + WEBHOOK_PATH

import inspect
from telegram.ext import Application

print(inspect.signature(Application.run_webhook))
app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
# app = (
#     ApplicationBuilder()
#     .token(TELEGRAM_BOT_TOKEN)
#     .webhook(
#         listen="0.0.0.0",
#         port=443,
#         url_path=WEBHOOK_PATH,
#         webhook_url=WEBHOOK_URL
#     )
#     .build()
# )
# Add this line to set menu commands at startup
app.post_init = set_menu_commands
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("free", show_free_gifts))
app.add_handler(CommandHandler("my_booked", show_booked_gifts))
app.add_handler(CallbackQueryHandler(confirm_booking, pattern="^book\\|"))
app.add_handler(CallbackQueryHandler(finalize_booking, pattern="^confirm\\|"))
app.add_handler(CallbackQueryHandler(remove_booking, pattern="^remove\\|"))
app.add_handler(CallbackQueryHandler(cancel_confirmation, pattern="^cancel$"))
app.add_handler(CallbackQueryHandler(cancel_booking, pattern="^unbook\\|"))
app.add_handler(CallbackQueryHandler(remove_confirm, pattern=r"^remove_confirm\|"))
app.add_handler(CallbackQueryHandler(remove_abort, pattern=r"^remove_abort\|"))
app.add_handler(CallbackQueryHandler(button_handler))


# async def main():
#     app.run_webhook(
#         listen="0.0.0.0",          # listen on all IPs
#         port=443,                 # port to listen on
#         webhook_url=WEBHOOK_URL,
#         # webhook_path=WEBHOOK_PATH,
#         # secret_token="your_secret_token"  # optional, but recommended
#     )

if __name__ == "__main__":
    # app.run_webhook()
    app.run_webhook(
        listen="0.0.0.0",          # listen on all IPs
        port=443,                 # port to listen on
        webhook_url=WEBHOOK_URL,
        url_path=WEBHOOK_PATH,  # –®–ª—è—Ö, –Ω–∞ —è–∫–∏–π Telegram –Ω–∞–¥—Å–∏–ª–∞—Ç–∏–º–µ POST
        # webhook_path=WEBHOOK_PATH,
        # secret_token="your_secret_token"  # optional, but recommended
    )
    # import asyncio
    # asyncio.run(main())
#
# if __name__ == "__main__":
#     app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
#
#     # Add this line to set menu commands at startup
#     app.post_init = set_menu_commands
#
#     app.add_handler(CommandHandler("start", start))
#     app.add_handler(CommandHandler("free", show_free_gifts))
#     app.add_handler(CommandHandler("my_booked", show_booked_gifts))
#     app.add_handler(CallbackQueryHandler(confirm_booking, pattern="^book\\|"))
#     app.add_handler(CallbackQueryHandler(finalize_booking, pattern="^confirm\\|"))
#     app.add_handler(CallbackQueryHandler(remove_booking, pattern="^remove\\|"))
#     app.add_handler(CallbackQueryHandler(cancel_confirmation, pattern="^cancel$"))
#     app.add_handler(CallbackQueryHandler(cancel_booking, pattern="^unbook\\|"))
#     app.add_handler(CallbackQueryHandler(remove_confirm, pattern=r"^remove_confirm\|"))
#     app.add_handler(CallbackQueryHandler(remove_abort, pattern=r"^remove_abort\|"))
#     app.add_handler(CallbackQueryHandler(button_handler))
#
#     # Start polling
#     app.run_polling()
